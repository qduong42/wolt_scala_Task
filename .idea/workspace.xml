<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="417564aa-acc4-4383-850b-db4a6d0f9226" name="Changes" comment="delivery distance 0 still costs 2 euros delivery cost. Tests change to directly test subfunctions of delivery cost calculation itself, not asserting that response should equal total delivery cost. Should be more transparent what is being tested and individual components can be tested better">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/scala/api/routes/DeliveryApiRoutes.scala" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/scala/api/routes/DeliveryApiRoutes.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/scala/api/services/DeliveryFeeCalculationService.scala" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/scala/api/services/DeliveryFeeCalculationService.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/scala/api/routes/DeliveryApiRoutesSpec.scala" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/scala/api/routes/DeliveryApiRoutesSpec.scala" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExportToHTMLSettings">
    <option name="OPEN_IN_BROWSER" value="true" />
    <option name="OUTPUT_DIRECTORY" value="C:\Users\tin_b\IdeaProjects\WoltScalaTask\htmlReport" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="SBT">
      <state>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="WoltScalaTask" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="WoltScalaTask" type="f1a62948:ProjectNode" />
                <item name="WoltScalaTask" type="2d1252cf:ModuleNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="WoltScalaTask" type="f1a62948:ProjectNode" />
                <item name="WoltScalaTask" type="2d1252cf:ModuleNode" />
                <item name="sbt tasks" type="d9357504:SbtViewContributor$SbtTasksGroupNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;qduong42&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">
    <option name="selectedUrlAndAccountId">
      <UrlAndAccount>
        <option name="accountId" value="41f2932c-9a3d-40ee-8329-9b189f1b5e4e" />
        <option name="url" value="https://github.com/qduong42/wolt_scala_Task.git" />
      </UrlAndAccount>
    </option>
  </component>
  <component name="KubernetesApiProvider">{
  &quot;isMigrated&quot;: true
}</component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectCodeStyleSettingsMigration">
    <option name="version" value="2" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;customColor&quot;: &quot;&quot;,
  &quot;associatedIndex&quot;: 4
}</component>
  <component name="ProjectId" id="2bUFNq1WKEGQxsjKUsKni38k5Jx" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Application.Main.executor": "Run",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.go.formatter.settings.were.checked": "true",
    "RunOnceActivity.go.migrated.go.modules.settings": "true",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should be rejected for other requests than POST request when DELETE request.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct cart value fee calculation when cart value below MinimumCartValueNoSurcharge.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery distance fee when delivery distance is 0 returns delivery fee first 1000m\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery distance fee when delivery distance is 1 - 500\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery distance fee when delivery distance is 1000\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery distance fee when delivery distance is 1999\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery distance fee when delivery distance is 2000.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery distance fee when delivery distance is 0 returns delivery fee first 1000m.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery distance fee when delivery distance is 0.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery fee influenced by cart value when cart value below MinimumCartValueNoSurcharge.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery fee influenced by cart value when cart value equals MinimumCartValueNoSurcharge.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery fee influenced by cart value when cart value is 0.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery fee influenced by cart value when cart value more than MinimumCartValueNoSurcharge.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct gross delivery fee when cart value is 0.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct gross delivery fee when maximumdeliveryfee is exceeded.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct gross delivery fee when number of items are 0.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct number of items fee surcharge when items equals MaximumNumberOfItemsNoSurcharge : 4.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct number of items fee surcharge when items more than MaximumNumberOfItemsNoSurcharge but equal to MaximumNumberOfItemsNoBulkSurcharge.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct number of items fee surcharge when items more than both MaximumNumberOfItemsNoSurcharge and MaximumNumberOfItemsNoBulkSurcharge.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.HTTP Request to all other paths should return a 'not found' response for unsupported endpoints when other endpoint requested.executor": "Run",
    "ScalaTest.DeliveryApiRoutesSpec.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should be rejected for anything other than POST\nHTTP Request should return a success message for POST requests to /api/delivery-fee\nHTTP Request should return a bad request for POST requests with invalid time to /api/delivery-fee when random string input not remotely related to time\nHTTP Request should return a bad request for POST requests with invalid time to /api/delivery-fee when time is almost like in ISO but missing T and Z\nHTTP Request should return a bad request:malformed for POST requests missing required members when cart_value is missing in POST request body\nHTTP Request should return a bad request:malformed for POST requests missing required members when delivery_distance is missing in POST request body\nHTTP Request should return a bad request:malformed for POST requests missing required members when number_of_items is missing in POST request body\nHTTP Request should return a bad request:malformed for POST requests missing required members when time is missing in POST request body\nHTTP Request should return a bad request:malformed for POST requests with wrong types for fields\nHTTP Request should Unsupported Media Type response for POST requests with headers other than JSON for example text/plain\nHTTP Request should return correct delivery distance fee when delivery distance is 0\nHTTP Request should return correct delivery distance fee when delivery distance is 1 - 500\nHTTP Request should return correct delivery distance fee when delivery distance is 1000\nHTTP Request should return correct delivery distance fee when delivery distance is 1999\nHTTP Request should return correct delivery distance fee when delivery distance is 2000\nHTTP Request should return correct delivery fee influenced by cart value when cart value below MinimumCartValueNoSurcharge\nHTTP Request should return correct delivery fee influenced by cart value when cart value equals MinimumCartValueNoSurcharge\nHTTP Request should return correct delivery fee influenced by cart value when cart value more than MinimumCartValueNoSurcharge\nHTTP Request should return correct delivery fee influenced by cart value when cart value equals CartValueNeededForFreeDelivery\nHTTP Request should return correct delivery fee influenced by number of items when items equals MaximumNumberOfItemsNoSurcharge\nHTTP Request should return correct delivery fee influenced by number of items when items more than MaximumNumberOfItemsNoSurcharge but equal to MaximumNumberOfItemsNoBulkSurcharge\nHTTP Request should return correct delivery fee influenced by number of items when items more than both MaximumNumberOfItemsNoSurcharge and MaximumNumberOfItemsNoBulkSurcharge.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should be rejected for anything other than POST\nHTTP Request should return a success message for POST requests to /api/delivery-fee\nHTTP Request should return a bad request for POST requests with invalid time to /api/delivery-fee when string is not even time\nHTTP Request should return a bad request for POST requests with invalid time to /api/delivery-fee when Time is almost like in ISO but missing T and Z\nHTTP Request should return a bad request:malformed for POST requests missing required members when cart_value is missing in POST request body\nHTTP Request should return a bad request:malformed for POST requests missing required members when delivery_distance is missing in POST request body\nHTTP Request should return a bad request:malformed for POST requests missing required members when number_of_items is missing in POST request body\nHTTP Request should return a bad request:malformed for POST requests missing required members when time is missing in POST request body\nHTTP Request should return a bad request:malformed for POST requests with wrong types for fields\nHTTP Request should return rejection for POST requests with headers other than JSON for example text/plain.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should be rejected for anything other than POST.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should delivery distance is 1000.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should delivery distance is 1999.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should delivery distance is 2000.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should delivery distance is 501 - 1000.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should have a 1.2x multiplier to fee influenced by delivery time when delivery time is on Friday between 15:00 and 19:00 inclusive.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should have a 1.2x multiplier to fee influenced by delivery time when delivery time is on Tuesday between 15:00 and 19:00 inclusive.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should not have a multiplier(1.0f) influenced by delivery time when delivery time is on Tuesday between 15:00 and 19:00 inclusive.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should return a response in application/json.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should return correct delivery distance fee calculation when delivery distance is 0\nHTTP Request should return correct delivery distance fee calculation when delivery distance is 1 - 500.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should return correct delivery distance fee calculation when delivery distance is 0.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should return correct delivery distance fee calculation when delivery distance is 1 - 500.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should return correct delivery fee influenced by cart value when cart value below MinimumCartValueNoSurcharge.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should return correct delivery fee influenced by number of items when items equals MaximumNumberOfItemsNoSurcharge.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should return correct delivery fee influenced by number of items when items more than MaximumNumberOfItemsNoSurcharge but equal to MaximumNumberOfItemsNoBulkSurcharge.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should return correct delivery fee influenced by number of items when items more than both MaximumNumberOfItemsNoSurcharge and MaximumNumberOfItemsNoBulkSurcharge.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should return correct delivery fee when cart value below MinimumCartValueNoSurcharge.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should return correct delivery fee when cart value equals CartValueNeededForFreeDelivery.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should return correct delivery fee when cart value equals MinimumCartValueNoSurcharge.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should return correct delivery fee when cart value more than MinimumCartValueNoSurcharge.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request should return rejection for POST requests with headers other than JSON for example text/plain.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request to / should return a 'not found' response for unsupported endpoints.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should be rejected for other requests than POST request\nHTTP Request to /api/calculate-calculate-delivery-fee should return a success message for POST request\nHTTP Request to /api/calculate-calculate-delivery-fee should return a response in application/json for POST request\nHTTP Request to /api/calculate-calculate-delivery-fee should return a bad request for POST requests with invalid time in body when random string input not remotely related to time\nHTTP Request to /api/calculate-calculate-delivery-fee should return a bad request for POST requests with invalid time in body when time is almost like in ISO but missing T and Z\nHTTP Request to /api/calculate-calculate-delivery-fee should return a bad request for POST requests with invalid time in body when time given with invalid Date of month\nHTTP Request to /api/calculate-calculate-delivery-fee should return a bad request:malformed for POST requests missing required members in body when cart_value is missing in POST request body\nHTTP Request to /api/calculate-calculate-delivery-fee should return a bad request:malformed for POST requests missing required members in body when delivery_distance is missing in POST request body\nHTTP Request to /api/calculate-calculate-delivery-fee should return a bad request:malformed for POST requests missing required members in body when number_of_items is missing in POST request body\nHTTP Request to /api/calculate-calculate-delivery-fee should return a bad request:malformed for POST requests missing required members in body when time is missing in POST request body\nHTTP Request to /api/calculate-calculate-delivery-fee should return a bad request:malformed for POST requests with wrong types for fields in body\nHTTP Request to /api/calculate-calculate-delivery-fee should return a bad request \"One or more input field values except time is negative\"\nHTTP Request to /api/calculate-calculate-delivery-fee should Unsupported Media Type response for POST requests with headers other than JSON for example text/plain\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery distance fee when delivery distance is 0\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery distance fee when delivery distance is 1 - 500\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery distance fee when delivery distance is 1000\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery distance fee when delivery distance is 1999\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery distance fee when delivery distance is 2000\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery fee influenced by cart value when cart value below MinimumCartValueNoSurcharge\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery fee influenced by cart value when cart value equals MinimumCartValueNoSurcharge\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery fee influenced by cart value when cart value more than MinimumCartValueNoSurcharge\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery fee influenced by cart value when cart value equals CartValueNeededForFreeDelivery\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery fee influenced by number of items when items equals MaximumNumberOfItemsNoSurcharge\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery fee influenced by number of items when items more than MaximumNumberOfItemsNoSurcharge but equal to MaximumNumberOfItemsNoBulkSurcharge\nHTTP Request to /api/calculate-calculate-delivery-fee should return correct delivery fee influenced by number of items when items more than both MaximumNumberOfItemsNoSurcharge and MaximumNumberOfItemsNoBulkSurcharge\nHTTP Request to /api/calculate-calculate-delivery-fee should have a 1.2x multiplier to fee influenced by delivery time when delivery time is on Friday between 15:00 and 19:00 inclusive\nHTTP Request to /api/calculate-calculate-delivery-fee should not have a multiplier(1.0f) influenced by delivery time when delivery time is on Tuesday between 15:00 and 19:00 inclusive.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should have a 1.2x multiplier to fee influenced by delivery time when delivery time is on Friday between 15:00 and 19:00 inclusive.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return a bad request \"One or more input field values except time is negative\".executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return a bad request for POST requests with invalid time in body when time given with invalid Date of month.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return a bad request for POST requests with invalid time in body when time is not given in Instant form in UTC yyyy-MM-ddTHH:mm:ss.SSSZ.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request to all other paths should return a 'not found' response for unsupported endpoints when api root endpoint requested.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.HTTP Request to all other paths should return a 'not found' response for unsupported endpoints when root endpoint requested.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.MyApiRoutes should return 405 method not allowed for anything other than POST.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.MyApiRoutes should return 415 Unsupported Media Type for POST requests with headers other than JSON.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.MyApiRoutes should return a bad request for POST requests missing required member cart value.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.MyApiRoutes should return a bad request for POST requests missing required members when delivery_distance is missing in POST request body.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.MyApiRoutes should return a bad request for POST requests missing required members when time is missing in POST request body.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.MyApiRoutes should return a bad request for POST requests with invalid time to /api/delivery-fee when Time is almost like in ISO but missing T and Z.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.MyApiRoutes should return a bad request for POST requests with invalid time to /api/delivery-fee.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.MyApiRoutes should return a bad request:malformed for POST requests with wrong types for fields.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.MyApiRoutes should return a success message for POST requests to /api/delivery-fee\nMyApiRoutes should return a bad request for POST requests with invalid time to /api/delivery-fee when string is not even time\nMyApiRoutes should return a bad request for POST requests with invalid time to /api/delivery-fee when Time is almost like in ISO but missing T and Z\nMyApiRoutes should return a bad request for POST requests missing required members when cart_value is missing in POST request body\nMyApiRoutes should return a bad request for POST requests missing required members when delivery_distance is missing in POST request body\nMyApiRoutes should return a bad request for POST requests missing required members when number_of_items is missing in POST request body\nMyApiRoutes should return a bad request for POST requests missing required members when time is missing in POST request body\nMyApiRoutes should return 415 Unsupported Media Type for POST requests with headers other than JSON for example text/plain.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.MyApiRoutes should return a success message for POST requests to /api/delivery-fee\nMyApiRoutes should return a bad request for POST requests with invalid time to /api/delivery-fee when string is not even time\nMyApiRoutes should return a bad request for POST requests with invalid time to /api/delivery-fee when Time is almost like in ISO but missing T and Z.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.MyApiRoutes should return a success message for POST requests to /api/delivery-fee\nMyApiRoutes should return a bad request for POST requests with invalid time to /api/delivery-fee.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.MyApiRoutes should return a success message for POST requests to /api/delivery-fee.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.MyApiRoutes should return a success message for POST requests to /api/endpoint.executor": "Run",
    "ScalaTest.MyApiRoutesSpec.executor": "Run",
    "git-widget-placeholder": "master",
    "go.import.settings.migrated": "true",
    "ignore.virus.scanning.warn.message": "true",
    "kotlin-language-version-configured": "true",
    "last_opened_file_path": "C:/Users/tin_b/Downloads/WoltScalaTask - Submit",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "settings.editor.selected.configurable": "advanced.settings",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RunManager" selected="ScalaTest.DeliveryApiRoutesSpec">
    <configuration name="Main" type="Application" factoryName="Application" temporary="true">
      <option name="MAIN_CLASS_NAME" value="api.Main" />
      <module name="WoltScalaTask" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="api.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="DeliveryApiRoutesSpec" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="WoltScalaTask" />
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Class" />
      <option name="testClassPath" value="api.routes.DeliveryApiRoutesSpec" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct gross delivery fee when cart value is 0" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="WoltScalaTask" />
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="testClassPath" value="api.routes.DeliveryApiRoutesSpec" />
      <option name="testName" value="HTTP Request to /api/calculate-calculate-delivery-fee should return correct gross delivery fee when cart value is 0" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct gross delivery fee when maximumdeliveryfee is exceeded" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="WoltScalaTask" />
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="testClassPath" value="api.routes.DeliveryApiRoutesSpec" />
      <option name="testName" value="HTTP Request to /api/calculate-calculate-delivery-fee should return correct gross delivery fee when maximumdeliveryfee is exceeded" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="DeliveryApiRoutesSpec.HTTP Request to all other paths should return a 'not found' response for unsupported endpoints when other endpoint requested" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="WoltScalaTask" />
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="testClassPath" value="api.routes.DeliveryApiRoutesSpec" />
      <option name="testName" value="HTTP Request to all other paths should return a 'not found' response for unsupported endpoints when other endpoint requested" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Application.Main" />
      <item itemvalue="ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct gross delivery fee when cart value is 0" />
      <item itemvalue="ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct gross delivery fee when maximumdeliveryfee is exceeded" />
      <item itemvalue="ScalaTest.DeliveryApiRoutesSpec.HTTP Request to all other paths should return a 'not found' response for unsupported endpoints when other endpoint requested" />
      <item itemvalue="ScalaTest.DeliveryApiRoutesSpec" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="ScalaTest.DeliveryApiRoutesSpec" />
        <item itemvalue="Application.Main" />
        <item itemvalue="ScalaTest.DeliveryApiRoutesSpec.HTTP Request to all other paths should return a 'not found' response for unsupported endpoints when other endpoint requested" />
        <item itemvalue="ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct gross delivery fee when maximumdeliveryfee is exceeded" />
        <item itemvalue="ScalaTest.DeliveryApiRoutesSpec.HTTP Request to /api/calculate-calculate-delivery-fee should return correct gross delivery fee when cart value is 0" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="417564aa-acc4-4383-850b-db4a6d0f9226" name="Changes" comment="" />
      <created>1706261719276</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1706261719276</updated>
      <workItem from="1706261722174" duration="6923000" />
      <workItem from="1706284393416" duration="29000" />
      <workItem from="1706284437459" duration="9966000" />
      <workItem from="1706303011975" duration="14843000" />
      <workItem from="1706469819594" duration="29418000" />
      <workItem from="1706609994153" duration="1897000" />
      <workItem from="1706618050583" duration="694000" />
      <workItem from="1706618909729" duration="5551000" />
    </task>
    <task id="LOCAL-00001" summary="1 Post Request, root working, post not accepting json">
      <option name="closed" value="true" />
      <created>1706284965846</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1706284965846</updated>
    </task>
    <task id="LOCAL-00002" summary="1 Post Request, root working, post not accepting json">
      <option name="closed" value="true" />
      <created>1706285017285</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1706285017285</updated>
    </task>
    <task id="LOCAL-00003" summary="1 Post Request, root working, post not accepting json">
      <option name="closed" value="true" />
      <created>1706285058249</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1706285058249</updated>
    </task>
    <task id="LOCAL-00004" summary="Added tests for bad requests, missing fields, wrong content-type header.">
      <option name="closed" value="true" />
      <created>1706293230337</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1706293230337</updated>
    </task>
    <task id="LOCAL-00005" summary="Added tests for bad requests, missing fields, wrong content-type header.">
      <option name="closed" value="true" />
      <created>1706293246733</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1706293246733</updated>
    </task>
    <task id="LOCAL-00006" summary="Base Program Complete, TODO: Add more tests, clean code">
      <option name="closed" value="true" />
      <created>1706520346792</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1706520346792</updated>
    </task>
    <task id="LOCAL-00007" summary="Cleaned Code. TODO: ADD EVEN MORE tests">
      <option name="closed" value="true" />
      <created>1706542906344</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1706542906344</updated>
    </task>
    <task id="LOCAL-00008" summary="Renamed MyApiRoutes to DeliveryApiRoutes TODO: ADD EVEN MORE tests">
      <option name="closed" value="true" />
      <created>1706543418747</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1706543418747</updated>
    </task>
    <task id="LOCAL-00009" summary="Minor Adjustments TODO: ADD EVEN MORE tests">
      <option name="closed" value="true" />
      <created>1706561538456</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1706561538456</updated>
    </task>
    <task id="LOCAL-00010" summary="added delete req to tests. TODO: ADD EVEN MORE tests">
      <option name="closed" value="true" />
      <created>1706618143154</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1706618143154</updated>
    </task>
    <task id="LOCAL-00011" summary="moved case class out of trait to avoid warning: The outer reference in this type test cannot be checked at run time.  TODO: ADD EVEN MORE tests">
      <option name="closed" value="true" />
      <created>1706621281485</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1706621281485</updated>
    </task>
    <option name="localTasksCounter" value="12" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Worked, resolved errors with testkit not found." />
    <MESSAGE value="1 Post Request, root working, post not accepting json" />
    <MESSAGE value="Added tests for bad requests, missing fields, wrong content-type header." />
    <MESSAGE value="Base Program Complete, TODO: Add more tests, clean code" />
    <MESSAGE value="Cleaned Code. TODO: ADD EVEN MORE tests" />
    <MESSAGE value="Renamed MyApiRoutes to DeliveryApiRoutes TODO: ADD EVEN MORE tests" />
    <MESSAGE value="Minor Adjustments TODO: ADD EVEN MORE tests" />
    <MESSAGE value="added delete req to tests. TODO: ADD EVEN MORE tests" />
    <MESSAGE value="moved case class out of trait to avoid warning: The outer reference in this type test cannot be checked at run time.  TODO: ADD EVEN MORE tests" />
    <MESSAGE value="delivery distance 0 still costs 2 euros delivery cost. Tests change to directly test subfunctions of delivery cost calculation itself, not asserting that response should equal total delivery cost. Should be more transparent what is being tested and individual components can be tested better" />
    <option name="LAST_COMMIT_MESSAGE" value="delivery distance 0 still costs 2 euros delivery cost. Tests change to directly test subfunctions of delivery cost calculation itself, not asserting that response should equal total delivery cost. Should be more transparent what is being tested and individual components can be tested better" />
  </component>
  <component name="VgoProject">
    <settings-migrated>true</settings-migrated>
  </component>
  <component name="com.intellij.coverage.CoverageDataManagerImpl">
    <SUITE FILE_PATH="coverage/WoltScalaTask$MyApiRoutesSpec.ic" NAME="MyApiRoutesSpec Coverage Results" MODIFIED="1706350935487" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
  </component>
</project>